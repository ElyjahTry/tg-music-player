from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    ContextTypes, filters, ConversationHandler
)
import json
import os

TOKEN = '7653784788:AAHeNQqdYB95aeuGCcVmHl_ytTsRvFvzkk8'

DATA_FILE = 'data.json'
USER_STATE = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

STAGE_ALBUM, STAGE_YEAR, STAGE_GENRE, STAGE_COVER = range(4)

# –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π JSON, –µ—Å–ª–∏ –Ω–µ—Ç
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({"tracks": []}, f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_data():
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ MP3, –∏ —è –∏—Ö —Å–æ—Ö—Ä–∞–Ω—é üìÄ")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    audio = message.audio

    if audio:
        file_id = audio.file_id
        title = audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        performer = audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        duration = audio.duration

        data = load_data()

        track = {
            "file_id": file_id,
            "title": title,
            "performer": performer,
            "duration": duration
        }

        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        USER_STATE[message.from_user.id] = track

        await message.reply_text(
            f"üé∂ –°–æ—Ö—Ä–∞–Ω–∏–ª: {performer} ‚Äì {title}\n"
            "–•–æ—á–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∞–ª—å–±–æ–º, –≥–æ–¥, –∂–∞–Ω—Ä, –æ–±–ª–æ–∂–∫–∞)? –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        )
        return STAGE_ALBUM

async def skip_extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    data = load_data()
    if user_id in USER_STATE:
        data["tracks"].append(USER_STATE[user_id])
        save_data(data)
        del USER_STATE[user_id]
    await update.message.reply_text("–û–∫–µ–π, —Ç—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚úÖ")
    return ConversationHandler.END

async def get_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    USER_STATE[user_id]["album"] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2022)")
    return STAGE_YEAR

async def get_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        USER_STATE[user_id]["year"] = int(update.message.text)
    except ValueError:
        USER_STATE[user_id]["year"] = None
    await update.message.reply_text("üé≠ –£–∫–∞–∂–∏ –∂–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: Rock, Pop)")
    return STAGE_GENRE

async def get_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    USER_STATE[user_id]["genre"] = update.message.text
    await update.message.reply_text("üñº –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏ /skip)")
    return STAGE_COVER

async def get_cover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if update.message.photo:
        # –ë–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é
        photo = update.message.photo[-1]
        USER_STATE[user_id]["cover_file_id"] = photo.file_id
    else:
        USER_STATE[user_id]["cover_file_id"] = None

    data = load_data()
    data["tracks"].append(USER_STATE[user_id])
    save_data(data)
    del USER_STATE[user_id]

    await update.message.reply_text("‚úÖ –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏! –°–ø–∞—Å–∏–±–æ :)")
    return ConversationHandler.END

async def list_tracks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data["tracks"]:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ üò¢")
        return

    msg = "üìÇ –¢–≤–æ–∏ —Ç—Ä–µ–∫–∏:\n\n"
    for i, t in enumerate(data["tracks"], start=1):
        msg += f"{i}. {t.get('performer', '?')} ‚Äì {t.get('title', '?')}\n"

    await update.message.reply_text(msg)

app = ApplicationBuilder().token(TOKEN).build()

# ConversationHandler –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.AUDIO, handle_audio)],
    states={
        STAGE_ALBUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_album)],
        STAGE_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_year)],
        STAGE_GENRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_genre)],
        STAGE_COVER: [
            MessageHandler(filters.PHOTO, get_cover),
            CommandHandler("skip", skip_extra),
        ],
    },
    fallbacks=[CommandHandler("skip", skip_extra)],
)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("tracks", list_tracks))
app.add_handler(conv_handler)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º MP3...")
app.run_polling()
